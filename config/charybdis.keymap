#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NUFU 1
#define SYM 2
#define NAV 3
#define MED 4
#define POI 5
#define SCR 6
#define SNI 7

&sl { release-after-ms = <250>; };

&mt {
    tapping-term-ms = <200>;
    quick-tap-ms = <150>;
    flavor = "tap-preferred";
};

&lt { quick-tap-ms = <180>; };

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };


    behaviors {
        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            hold-trigger-on-release;
        };

        hmr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_lwin {
            bindings = <&kp LWIN>;
            key-positions = <14 13>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1 2 3 5 6 7>;
        };

        combo_lshft {
            bindings = <&kp LSHIFT>;
            key-positions = <13 12>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1 2 3 5 6 7>;
        };

        combo_lctrl {
            bindings = <&kp LCTRL>;
            key-positions = <12 11>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1 2 3 5 6 7>;
        };

        combo_lalt {
            bindings = <&kp LALT>;
            key-positions = <11 10>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1 2 3 5 6 7>;
        };

        combo_rwin {
            bindings = <&kp LWIN>;
            key-positions = <15 16>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1 2 3 5 6 7>;
        };

        combo_rshft {
            bindings = <&kp LSHIFT>;
            key-positions = <17 16>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1 2 3 5 6 7>;
        };

        combo_rctrl {
            bindings = <&kp LCTRL>;
            key-positions = <17 18>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1 2 3 5 6 7>;
        };

        combo_ralt {
            bindings = <&kp LALT>;
            key-positions = <19 18>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1 2 3 5 6 7>;
        };

        combo_lshft_lctrl {
            bindings = <&kp LC(LSHFT)>;
            key-positions = <13 12 11>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1 2 3 5 6 7>;
        };

        combo_lshft_lalt {
            bindings = <&kp LS(LALT)>;
            key-positions = <13 12 10>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1 2 3 5 6 7>;
        };

        combo_lctrl_lalt {
            bindings = <&kp LC(LALT)>;
            key-positions = <12 11 10>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1 2 3 5 6 7>;
        };

        combo_lctrl_lwin {
            bindings = <&kp LC(LWIN)>;
            key-positions = <12 11 10 13>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1 2 3 5 6 7>;
        };

        combo_rshft_rctrl {
            bindings = <&kp LC(LSHFT)>;
            key-positions = <16 17 18>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1 2 3 5 6 7>;
        };

        combo_rshft_ralt {
            bindings = <&kp LS(LALT)>;
            key-positions = <16 17 19>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1 2 3 5 6 7>;
        };

        combo_rctrl_ralt {
            bindings = <&kp LC(LALT)>;
            key-positions = <19 18 17>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1 2 3 5 6 7>;
        };

        combo_rctrl_rwin {
            bindings = <&kp LC(LWIN)>;
            key-positions = <16 17 18 19>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1 2 3 5 6 7>;
        };

        combo_undo {
            bindings = <&kp LC(Z)>;
            key-positions = <20 21>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1 2 3 5 6 7>;
        };

        combo_copy {
            bindings = <&kp LC(C)>;
            key-positions = <21 22>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1 2 3 5 6 7>;
        };

        combo_paste {
            bindings = <&kp LC(V)>;
            key-positions = <22 23>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1 2 3 5 6 7>;
        };

        combo_cut {
            bindings = <&kp LC(X)>;
            key-positions = <23 21>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1 2 3 5 6 7>;
        };

        combo_redo {
            bindings = <&kp LC(Y)>;
            key-positions = <23 24>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1 2 3 5 6 7>;
        };

        combo_lang {
            bindings = <&kp RALT>;
            key-positions = <18 16>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1 2 3 5 6 7>;
        };

        combo_hanja {
            bindings = <&kp RCTRL>;
            key-positions = <17 19>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1 2 3 5 6 7>;
        };

        combo_lclk {
            bindings = <&mkp LCLK>;
            key-positions = <26 27>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1 2 3 5 6 7>;
        };

        combo_rclk {
            bindings = <&mkp RCLK>;
            key-positions = <28 27>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1 2 3 5 6 7>;
        };

        combo_mclk {
            bindings = <&mkp MCLK>;
            key-positions = <28 27 26>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1 2 3 5 6 7>;
        };

        combo_prev {
            bindings = <&mkp MB4>;
            key-positions = <26 16>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1 2 3 5 6 7>;
        };

        combo_next {
            bindings = <&mkp MB5>;
            key-positions = <27 17>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <0 1 2 3 5 6 7>;
        };

        combo_plus {
            bindings = <&kp PLUS>;
            key-positions = <4 14>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <1>;
        };

        combo_minus {
            bindings = <&kp MINUS>;
            key-positions = <3 13>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <1>;
        };

        combo_multiply {
            bindings = <&kp ASTRK>;
            key-positions = <2 12>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <1>;
        };

        combo_divide {
            bindings = <&kp SLASH>;
            key-positions = <1 11>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <1>;
        };

        combo_enter {
            bindings = <&kp ENTER>;
            key-positions = <14 24>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <1>;
        };

        combo_comma {
            bindings = <&kp COMMA>;
            key-positions = <23 13>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
            slow-release;
            layers = <1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            label = "Base";
            bindings = <
  &kp Q  &kp W  &kp E      &kp R        &kp T        &kp Y        &kp U         &kp I      &kp O      &kp P
  &kp A  &kp S  &kp D      &kp F        &kp G        &kp H        &kp J         &kp K      &kp L      &kp SEMI
  &kp Z  &kp X  &kp C      &kp V        &kp B        &kp N        &kp M         &kp COMMA  &lt 6 DOT  &lt 7 SLASH
                &lt 1 ESC  &lt 2 SPACE  &lt 3 TAB    &lt 1 ENTER  &lt SYM BSPC
            >;
        };

        Num {
            label = "Numeral";
            bindings = <
  &kp LBKT   &kp N7  &kp N8   &kp N9  &kp RBKT     &kp HOME   &kp END   &kp INS   &kp DEL    &kp BSPC
  &kp SQT    &kp N4  &kp N5   &kp N6  &kp EQUAL    &kp PLUS   &kp LEFT  &kp UP    &kp RIGHT  &kp ENTER
  &kp GRAVE  &kp N1  &kp N2   &kp N3  &kp BSLH     &kp MINUS  &kp N1    &kp DOWN  &kp ASTRK  &kp SLASH
                     &kp DOT  &kp N0  &kp MINUS    &trans     &trans
            >;
        };

        Symbol {
            label = "Symbol";
            bindings = <
  &kp LBRC   &kp AMPS  &kp STAR   &trans     &kp RIGHT_BRACE    &kp HOME   &kp END   &kp PRINTSCREEN  &kp SCROLLLOCK  &kp PAUSE_BREAK
  &kp DQT    &kp DLLR  &kp PRCNT  &kp CARET  &kp PLUS           &kp PG_UP  &kp LEFT  &kp UP           &kp RIGHT       &kp ENTER
  &kp TILDE  &kp EXCL  &kp AT     &kp HASH   &kp PIPE           &kp PG_DN  &trans    &kp DOWN         &trans          &trans
                       &kp LPAR   &kp RPAR   &kp UNDER          &trans     &trans
            >;
        };

        Fun {
            label = "Function";
            bindings = <
  &kp LC(Q)  &kp LC(W)  &kp LC(E)  &kp LC(R)  &kp LC(T)    &kp LC(Y)  &kp F7  &kp F8  &kp F9  &kp F12
  &kp LC(A)  &kp LC(S)  &kp LC(D)  &kp LC(F)  &kp LC(G)    &kp LC(H)  &kp F4  &kp F5  &kp F6  &kp F11
  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(B)    &kp LC(N)  &kp F1  &kp F2  &kp F3  &kp F10
                        &trans     &trans     &trans       &trans     &trans
            >;
        };

        Sys {
            label = "System";
            bindings = <
  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3      &bt BT_SEL 4    &bt BT_CLR  &bt BT_CLR_ALL    &out OUT_BLE  &out OUT_USB  &out OUT_TOG
  &kp C_PREV    &kp C_VOL_DN  &kp C_MUTE    &kp C_VOL_UP      &kp C_NEXT      &kp C_PREV  &kp C_VOL_DN      &kp C_MUTE    &kp C_VOL_UP  &kp C_NEXT
  &bootloader   &sys_reset    &trans        &trans            &trans          &trans      &trans            &trans        &sys_reset    &bootloader
                              &trans        &kp C_PLAY_PAUSE  &kp C_STOP      &kp C_STOP  &kp C_PLAY_PAUSE
            >;
        };

        Pointer {
            label = "Pointer";
            bindings = <
  &trans    &trans    &trans     &trans     &trans       &trans     &trans     &trans     &trans    &trans
  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans       &trans     &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI
  &trans    &mo SCR   &mo SNI    &trans     &trans       &trans     &trans     &tog SNI   &tog SCR  &trans
                      &mkp RCLK  &mkp LCLK  &mkp MCLK    &mkp MCLK  &mkp LCLK
            >;
        };

        Scroll {
            label = "Scroll";
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans    &trans  &trans
            >;
        };

        Sniper {
            label = "Sniper";
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans    &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Sys {
            if-layers = <1 3>;
            then-layer = <4>;
        };
    };
};
